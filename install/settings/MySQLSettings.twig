

namespace AdSky\Core\Settings;

use AdSky\Core\AdSky;

use AdSky\Core\Actions\Response;
use Medoo\Medoo;
use PDOException;

require_once __DIR__ . '/../../vendor/autoload.php';

class MySQLSettings extends Settings {

    public function __construct() {
        $this -> putSettings('MYSQL_HOST', '{{ attribute(post, 'form-mysql-host') }}');
        $this -> putSettings('MYSQL_PORT', {{ attribute(post, 'form-mysql-port') }});
        $this -> putSettings('MYSQL_DATABASE', '{{ attribute(post, 'form-mysql-db-name') }}');
        $this -> putSettings('MYSQL_USERNAME', '{{ attribute(post, 'form-mysql-db-username') }}');
        $this -> putSettings('MYSQL_PASSWORD', '{% if attribute(post, 'form-mysql-db-password') is defined %}{{ attribute(post, 'form-mysql-db-password') }}{% endif %}');
        $this -> putSettings('MYSQL_TABLES_PREFIXES', 'adsky_');
        $this -> putSettings('MYSQL_THROTTLING', !AdSky::APP_DEBUG);
    }

    public function getMySQLHost() {
        return $this -> getSettings('MYSQL_HOST');
    }

    public function getMySQLPort() {
        return $this -> getSettings('MYSQL_PORT');
    }

    public function getMySQLDataBase() {
        return $this -> getSettings('MYSQL_DATABASE');
    }

    public function getMySQLUsername() {
        return $this -> getSettings('MYSQL_USERNAME');
    }

    public function getMySQLPassword() {
        return $this -> getSettings('MYSQL_PASSWORD');
    }

    public function getMySQLTablesPrefixes() {
        return $this -> getSettings('MYSQL_TABLES_PREFIXES');
    }

    public function isThrottlingEnabled() {
        return $this -> getSettings('MYSQL_THROTTLING');
    }

    public function constructMedoo() {
        try {
            return new Medoo([
                'database_type' => 'mysql',
                'database_name' => $this -> getMySQLDataBase(),
                'server' => $this -> getMySQLHost(),
                'username' => $this -> getMySQLUsername(),
                'password' => $this -> getMySQLPassword(),

                'charset' => 'utf8mb4',

                'option' => [\PDO::ATTR_ERRMODE => \PDO::ERRMODE_EXCEPTION]
            ]);
        }
        catch(PDOException $ex) {
            die('Unable to connect to MySQL database. Please check your settings in core/settings/MySQLSettings.php.');
        }
    }

    public function getUsersTable() {
        return $this -> getSettings('MYSQL_TABLES_PREFIXES') . 'users';
    }

    public function getAdsTable() {
        return $this -> getSettings('MYSQL_TABLES_PREFIXES') . 'ads';
    }

    public function getPage($table, $join, callable $handler, $page = null, $where = []) {
        $adsky = AdSky ::getInstance();

        try {
            if($page == null || $page < 1) {
                $page = 1;
            }
            $page = intval($page);

            $medoo = $adsky -> getMedoo();
            $rows = $medoo -> count($table, []);

            if($rows <= 0) {
                return new Response(null, 'API_SUCCESS', [
                    'data' => [],
                    'page' => 1,
                    'minPage' => 1,
                    'maxPage' => 1,
                    'hasPrevious' => false,
                    'hasNext' => false
                ]);
            }

            $itemsPerPage = $adsky -> getWebsiteSettings() -> getWebsitePaginatorItemsPerPage();
            $maxPage = ceil($rows / $itemsPerPage);
            if($page > $maxPage) {
                $page = $maxPage;
            }

            $min = ($page - 1) * $itemsPerPage;
            $max = $min + $itemsPerPage;

            if($min != 0) {
                $max = $max - 1;
            }

            $where['LIMIT'] = [$min, $max];
            $data = [];
            foreach($medoo -> select($table, $join, $where) as $row) {
                $row = call_user_func_array($handler, [$row]);
                array_push($data, $row);
            }

            return new Response(null, 'API_SUCCESS', [
                'data' => $data,
                'page' => $page,
                'minPage' => 1,
                'maxPage' => $maxPage,
                'hasPrevious' => $page > 1,
                'hasNext' => $page < $maxPage
            ]);
        }
        catch(PDOException $ex) {
            return new Response('API_ERROR_MYSQL_ERROR', null, $ex);
        }
    }

}